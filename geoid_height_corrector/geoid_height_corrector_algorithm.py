# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GeoidHeightCorrector
                                 A QGIS plugin
 Convert ETR89 ellipsoid hegiht to DVR90 reference geoid height
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-07-13
        copyright            : (C) 2024 by AestasGIS
        email                : bvt@aestas.dk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'AestasGIS'
__date__ = '2024-07-13'
__copyright__ = '(C) 2024 by AestasGIS'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink)

from qgis import processing


class GeoidHeightCorrectorAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input vector layer (with z coordinates, ellipsoid height ETRS89 )'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Result layer with converted z coordinates to DVR90')
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        drape = processing.run("native:setmfromraster", {'INPUT':parameters['INPUT'],'RASTER':'D:/projekter/hoejdekorrektion/dvr90_2023.tif','BAND':1,'NODATA':0,'SCALE':1,'OFFSET':0,'OUTPUT':'TEMPORARY_OUTPUT'})

        source = self.parameterAsSource(drape, 'OUTPUT', context)
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context, source.fields(), source.wkbType(), source.sourceCrs())

        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()

        # Åbn rasterlag
        
        # Find CRS for rasterlag
        
        # Find CRS for inputlag
        
        # Hvis de er forskellige, så etabler koordinattransformation og sæt trans til true
        
        # Find offsetværdi (evt sæt til 0.0) 

        # For alle features...

            # Hvis trans, saa transformér geometri        

            # Hvis mulipart så gennemløb hver part / Hver node
            
                # Sæt z-værdi for node

            # Hvis singlepart så gennemløb hver node
                
                # Sæt z-værdi for node

                        

#       
#       crsSrc = QgsCoordinateReferenceSystem(4326)    # WGS 84
#       crsDest = QgsCoordinateReferenceSystem(32633)  # WGS 84 / UTM zone 33N
#       xform = QgsCoordinateTransform(crsSrc, crsDest)
#       
#       #create test layers    
#       uri1 = "linestring?crs=epsg:4326&field=id:integer"
#       scratchLayer1 = QgsVectorLayer(uri1, "Scratch point layer1",  "memory")
#       
#       feat = QgsFeature(scratchLayer1.pendingFields())
#       feat.setGeometry(QgsGeometry.fromPolyline([QgsPointXY(18, 5),QgsPointXY(18, 6)]))
#       (res, outFeats) = scratchLayer1.dataProvider().addFeatures([feat])
#       
#       uri2 = "linestring?crs=epsg:32633&field=id:integer"
#       scratchLayer2 = QgsVectorLayer(uri2, "Scratch point layer2",  "memory")
#       
#       #CRS transformation
#       feats = []
#       for f in scratchLayer1.getFeatures():
#           g = f.geometry()
#           g.transform(xform)
#           f.setGeometry(g)
#           feats.append(f)
#       
#       
#       scratchLayer2.dataProvider().addFeatures(feats)








#        for feature in layer.getFeatures():
  #            print('Processing feature {0}'.format(feature.id()))
#            geom = feature.geometry()
#            for part in geom.parts():
#                for p in part.vertices():
#                    print(p)


#       layers = QgsProject.instance().mapLayersByName('Draped')
#           layer = layers[0]
#           
#           layer.startEditing()
#           for f in layer.getFeatures():
#               geom = f.geometry().constGet()
#               ls = QgsLineString()
#               for p in geom:
#                   pt = QgsPoint(0,0,0)
#                   pt.setX(p.x())
#                   pt.setY(p.y())
#                   pt.setZ(round(p.z(),4))
#                   ls.addVertex(pt)
#               newgeom = QgsGeometry.fromPolyline(ls)
#               layer.changeGeometry(f.id(), newgeom)
#           
#           layer.commitChanges()




        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break


 
 -*
 *  ½-
 AddWS>ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ-
 +
            # Add a feature in the sink
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))

        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'convert_etrs89_height_to_dvr90_height'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'aestasgis_height_tool'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return GeoidHeightCorrectorAlgorithm()
